-- 1
SELECT 
    OC.CUSTOMER_ID,
    CONCAT (
        (
            CASE
                WHEN OC.CUSTOMER_GENDER = 'M'
                THEN 'Mr. '
                ELSE 'Ms. '
            END
        ),
        CONCAT (
            " ",
            UPPER(OC.CUSTOMER_FNAME),
            " ",
            UPPER(OC.CUSTOMER_LNAME)
        )
    ) AS NAME,
    OC.CUSTOMER_EMAIL,
    YEAR(OC.CUSTOMER_CREATION_DATE) AS CREATION_YEAR,
    CASE
        WHEN YEAR(OC.CUSTOMER_CREATION_DATE) < 2005 THEN 'A'
        WHEN YEAR(OC.CUSTOMER_CREATION_DATE) < 2011 THEN 'B'
        ELSE 'C'
    END AS CATEGORY
FROM 
    ONLINE_CUSTOMER OC; 

-- 2
SELECT 
    P.PRODUCT_ID,
    P.PRODUCT_DESC,
    P.PRODUCT_QUANTITY_AVAIL,
    P.PRODUCT_PRICE,
    (P.PRODUCT_PRICE * P.PRODUCT_QUANTITY_AVAIL) AS INVENTORY_VALUE,
    CASE 
        WHEN P.PRODUCT_PRICE > 200000 THEN P.PRODUCT_PRICE * 0.8
        WHEN P.PRODUCT_PRICE > 100000 THEN P.PRODUCT_PRICE * 0.85
        ELSE P.PRODUCT_PRICE * 0.9
    END AS New_Price
FROM 
    Product P
WHERE 
    P.PRODUCT_ID NOT IN (
        SELECT 
            OI.PRODUCT_ID
        FROM 
            ORDER_ITEMS OI
    )
ORDER BY 
    INVENTORY_VALUE DESC;
    
-- 3
SELECT 
    PC.PRODUCT_CLASS_CODE,
    PC.PRODUCT_CLASS_DESC,
    COUNT(P.PRODUCT_ID) AS COUNT_PRODUCT_TYPES,
    SUM(P.PRODUCT_QUANTITY_AVAIL * P.PRODUCT_PRICE) AS INVENTORY_VALUE
FROM 
    PRODUCT_CLASS PC
INNER JOIN 
    PRODUCT P ON PC.PRODUCT_CLASS_CODE = P.PRODUCT_CLASS_CODE
GROUP BY 
    PC.PRODUCT_CLASS_CODE,
    PC.PRODUCT_CLASS_DESC
HAVING 
    SUM(P.PRODUCT_QUANTITY_AVAIL * P.PRODUCT_PRICE) > 100000
ORDER BY 
    INVENTORY_VALUE DESC;

-- 4
SELECT 
    CUSTOMER_ID,
    FULL_NAME,
    CUSTOMER_EMAIL,
    CUSTOMER_PHONE,
    COUNTRY
FROM (
    SELECT 
        OH.CUSTOMER_ID,
        CONCAT(
            CUSTOMER_FNAME,
            ' ',
            CUSTOMER_LNAME
        ) AS FULL_NAME,
        OC.CUSTOMER_EMAIL,
        OC.CUSTOMER_PHONE,
        A.COUNTRY
    FROM 
        ORDER_HEADER OH
    LEFT JOIN 
        ONLINE_CUSTOMER OC ON OH.CUSTOMER_ID = OC.CUSTOMER_ID
    LEFT JOIN 
        ADDRESS A ON OC.ADDRESS_ID = A.ADDRESS_ID
    WHERE 
        OH.ORDER_STATUS = 'CANCELLED'
) S
WHERE 
    CUSTOMER_ID NOT IN (
        SELECT 
            OH.CUSTOMER_ID
        FROM 
            ORDER_HEADER OH
        WHERE 
            OH.ORDER_STATUS != 'CANCELLED'
    );

-- 5
SELECT 
    SP.SHIPPER_NAME,
    A.CITY,
    COUNT(DISTINCT OC.CUSTOMER_ID) AS NO_CUSTOMER_CATERED_TO,
    COUNT(OC.CUSTOMER_ID) AS NO_CONSIGNMENTS_CATERED
FROM 
    SHIPPER SP
INNER JOIN 
    ORDER_HEADER OH ON OH.SHIPPER_ID = SP.SHIPPER_ID
INNER JOIN 
    ONLINE_CUSTOMER OC ON OC.CUSTOMER_ID = OH.CUSTOMER_ID
INNER JOIN 
    ADDRESS A ON OC.ADDRESS_ID = A.ADDRESS_ID
WHERE 
    SP.SHIPPER_NAME IN ('DHL')
GROUP BY 
    A.CITY
ORDER BY 
    SP.SHIPPER_NAME;

-- 6
SELECT 
    PRODUCT_ID,
    PRODUCT_DESC,
    TOT_QTY AS QTY_SOLD,
    PRODUCT_QUANTITY_AVAIL,
    CASE
        WHEN PRODUCT_CLASS_DESC IN ('ELECTRONICS', 'COMPUTER') THEN
            CASE
                WHEN (PRODUCT_QUANTITY_AVAIL / S.TOT_QTY) < 0.1 THEN "LOW INVENTORY, NEED TO ADD INVENTORY"
                WHEN (PRODUCT_QUANTITY_AVAIL / S.TOT_QTY) < 0.5 THEN "MEDIUM INVENTORY, NEED TO ADD SOME INVENTORY"
                WHEN S.TOT_QTY IS NULL THEN "NO SALES IN PAST, GIVE DISCOUNT TO REDUCE INVENTORY"
                ELSE "SUFFICIENT INVENTORY"
            END
        WHEN PRODUCT_CLASS_DESC IN ('MOBILES', 'WATCHES') THEN
            CASE
                WHEN (PRODUCT_QUANTITY_AVAIL / S.TOT_QTY) < 0.2 THEN "LOW INVENTORY, NEED TO ADD INVENTORY"
                WHEN (PRODUCT_QUANTITY_AVAIL / S.TOT_QTY) < 0.6 THEN "MEDIUM INVENTORY, NEED TO ADD SOME INVENTORY"
                WHEN S.TOT_QTY IS NULL THEN "NO SALES IN PAST, GIVE DISCOUNT TO REDUCE INVENTORY"
                ELSE "SUFFICIENT INVENTORY"
            END
        ELSE
            CASE
                WHEN (PRODUCT_QUANTITY_AVAIL / S.TOT_QTY) < 0.3 THEN "LOW INVENTORY, NEED TO ADD INVENTORY"
                WHEN (PRODUCT_QUANTITY_AVAIL / S.TOT_QTY) < 0.7 THEN "MEDIUM INVENTORY, NEED TO ADD SOME INVENTORY"
                WHEN S.TOT_QTY IS NULL THEN "NO SALES IN PAST, GIVE DISCOUNT TO REDUCE INVENTORY"
                ELSE "SUFFICIENT INVENTORY"
            END
    END AS INVENTORY_STATUS
FROM (
    SELECT P.PRODUCT_ID
 , P.PRODUCT_DESC
 , PC.PRODUCT_CLASS_DESC
 , P.PRODUCT_QUANTITY_AVAIL
 , SUM(OI.PRODUCT_QUANTITY) AS TOT_QTY
 FROM PRODUCT P
 LEFT JOIN ORDER_ITEMS OI ON OI.PRODUCT_ID = P.PRODUCT_ID
 LEFT JOIN PRODUCT_CLASS PC ON P.PRODUCT_CLASS_CODE =
PC.PRODUCT_CLASS_CODE
 GROUP BY P.PRODUCT_ID
 , P.PRODUCT_DESC ,
 PC.PRODUCT_CLASS_DESC,
 P.PRODUCT_QUANTITY_AVAIL
) S;

-- 7
SELECT 
    ORDER_ID,
    VOLUME
FROM (
    SELECT 
        OI.ORDER_ID,
        P.PRODUCT_ID,
        SUM(LEN * WIDTH * HEIGHT) AS VOLUME
    FROM 
        ORDER_ITEMS OI
    INNER JOIN 
        PRODUCT P ON OI.PRODUCT_ID = P.PRODUCT_ID
    GROUP BY 
        OI.ORDER_ID,
        P.PRODUCT_ID
    ORDER BY 
        VOLUME
) TAB
HAVING 
    VOLUME <= (
        SELECT 
            (LEN * WIDTH * HEIGHT) AS CARTON_VOL
        FROM 
            CARTON
        WHERE 
            CARTON_ID = 10
    )
ORDER BY 
    VOLUME DESC 
LIMIT 1;

-- 8
SELECT 
    OC.CUSTOMER_ID,
    CONCAT(
        OC.CUSTOMER_FNAME,
        ' ',
        OC.CUSTOMER_LNAME
    ) AS FULLNAME,
    SUM(OI.PRODUCT_QUANTITY) AS TOT_QTY,
    SUM(OI.PRODUCT_QUANTITY * P.PRODUCT_PRICE) AS VALUE
FROM 
    ONLINE_CUSTOMER OC
INNER JOIN 
    ORDER_HEADER OH ON OC.CUSTOMER_ID = OH.CUSTOMER_ID
INNER JOIN 
    ORDER_ITEMS OI ON OH.ORDER_ID = OI.ORDER_ID
INNER JOIN 
    PRODUCT P ON OI.PRODUCT_ID = P.PRODUCT_ID
WHERE 
    OH.PAYMENT_MODE = 'CASH'
    AND OH.ORDER_STATUS = 'SHIPPED'
    AND OC.CUSTOMER_LNAME LIKE 'G%'
GROUP BY 
    OC.CUSTOMER_ID,
    FULLNAME;

-- 9
SELECT 
    S.ORDER_ID,
    S.PRODUCT_ID,
    S.PRODUCT_DESC,
    S.TOT_QTY
FROM (
    SELECT 
        OI.ORDER_ID,
        P.PRODUCT_ID,
        P.PRODUCT_DESC,
        SUM(PRODUCT_QUANTITY) AS TOT_QTY
    FROM 
        ORDER_ITEMS OI
    INNER JOIN 
        PRODUCT P ON OI.PRODUCT_ID = P.PRODUCT_ID
    WHERE 
        OI.ORDER_ID IN (
            SELECT 
                OI.ORDER_ID
            FROM 
                ORDER_ITEMS OI
            JOIN 
                ORDER_HEADER OH ON OI.ORDER_ID = OH.ORDER_ID
            JOIN 
                ONLINE_CUSTOMER OC ON OH.CUSTOMER_ID = OC.CUSTOMER_ID
            JOIN 
                ADDRESS A ON OC.ADDRESS_ID = A.ADDRESS_ID
            WHERE 
                OI.PRODUCT_ID = 201
                AND OH.ORDER_STATUS = 'SHIPPED' 
                AND A.CITY NOT IN ('BANGALORE', 'NEW DELHI')
        )
        AND P.PRODUCT_ID != 201
    GROUP BY 
		OI.ORDER_ID,
        P.PRODUCT_ID,
        PRODUCT_DESC
) S
ORDER BY 
    TOT_QTY DESC;

-- 10
SELECT 
    OH.ORDER_ID,
    OC.CUSTOMER_ID,
    CONCAT(
        OC.CUSTOMER_FNAME,
        ' ',
        OC.CUSTOMER_LNAME
    ) AS FULLNAME,
    SUM(OI.PRODUCT_QUANTITY) AS TOT_QTY
FROM 
    ONLINE_CUSTOMER OC
INNER JOIN 
    ORDER_HEADER OH ON OC.CUSTOMER_ID = OH.CUSTOMER_ID 
INNER JOIN 
    ORDER_ITEMS OI ON OH.ORDER_ID = OI.ORDER_ID
INNER JOIN 
    ADDRESS A ON A.ADDRESS_ID = OC.ADDRESS_ID
WHERE 
    MOD(OH.ORDER_ID, 2) = 0
    AND OH.ORDER_STATUS = 'SHIPPED'
    AND A.PINCODE NOT LIKE '5%'
GROUP BY 
    OH.ORDER_ID,
    OC.CUSTOMER_ID,
    FULLNAME;
